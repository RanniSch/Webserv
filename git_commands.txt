git pull            -> vom remote Repository herunterladen (wird aktualisiert, nicht geklont)
git restore <file>  -> stellt das gelöschte File wieder her
git branch          -> zeigt in welchem branch man ist
git checkout -b <branchname>            -> wechselt in und erstellt (-b) neuen Branch
git branch -a                           -> zeigt alle branches
git checkout master                     -> zum master branch wechseln
git remote add upstream <URL vom repo>  -> definiere die URL vom upstream (remote Hauptprojekt)
git fetch upstream                      -> hole die Änderungen vom remote repo (Hauptprojekt masterbranch) zu dir
git merge master                        -> zusammenführen vom fetch und dem master branch lokal
git push --set-upstream origin <branchnamen>    -> hochladen vom branch
git remote -v                                   -> shows the remote url of the repo
Git push -u <upstream Name> <branchname>        -> set upstream
git pull --all                                  -> pull all branches
git push -u origin <branchname>                 -> creates a remote branch from a local branch
git branch -d <local-branch>                    -> delete branch locally
git rm -rf --cached .                           -> when added .gitignore after the other files
git fetch origin full_SHA_key                   -> fetch a specific commit 
git chekout FETCH_HEAD                          -> checkout that specific commit


What is a fork?
Maybe sometimes you’d want to work on projects where you are not the owner or collaborator. In such situations where you do not have a push access to an existing project, you have an option of forking the repository.
So, what is a fork? A fork is nothing but a copy of the repository and you get to work on someone else’s project freely without affecting the project. So, forking basically means creating a copy of the repo on your GitHub account without having to bother adding users as collaborators allowing them push access. You can fork a project, push to it, and contribute the changes back to the original repository via what is known as a Pull Request.

Difference between Fork and Branch
Branching is probably one of the fundamental features available in most modern version control systems. A branch in Git is an isolated environment to add, modify or delete a portion of the code without messing with the main code of the project. 
Branching is to create another line of development in the project without affecting the main branch or repository. Forking, on the other hand, is to make a clone of the repository on your GitHub account without affecting the main repository. 
A fork is nothing but a duplicate copy of someone else’s project, whereas a branch is just a version of a repository.


I               "git clone ..."    change someting   "git add ."   "git commit -m .."   "git push"
local          /-------------> -------------------------------------------------------------> ----\
              /                                                                                    \
-------------/-----------------> --------------------------------------------------------------->   \----->
remote


II             "git clone ..."      "git pull"     A changed  
local          /------------->        /--------------------> 
              /                      /                                                        
-------------/-----------------> ---/---------------------->
remote            change A                        A changed 


                                      (git does not see changes in A)
III      "git clone ..."   change A    "git pull"                     A&B changed 
local          /--------------------> /----> ----------------------------------> 
              /                      /                                                        
-------------/-----------------> ---/--------------------->
remote                   change B            only B changed


                                    "git add ." +    "git pull --no-rebase" 
IV        "git clone ..."  change A  "git commit..."  (does not know how to merge)        A&B changed 
local          /-------------> -----------------------/-----------------------------------------------> 
              /                                      /                                                        
-------------/-----------------> -------------------/--------------------->
remote                     change B                        only B changed


                                    "git add ." +     "git push" NOT POSSIBLE (remote has commits)
V      "git clone ..."   change A   "git commit..."    first do IV and then push                       A changed 
local          /-------------> --------------------------\----------------------------------------------------------> 
              /                                         XXXXX                                                        
-------------/-----------------> --------------------------\--------------------------------------------------------->
remote                   change B                                                                      B changed


                                    "git add ." +     "git pull --no-rebase"   edit B locally (see beneath) then      new B    (as you
VI   "git clone ..."   change B   "git commit..."   (merge conflicts in B!!)   ..add.." "..commit.." "..push"         solve it by hand)
local          /-------------> ------------------------/-----------------------------------------------------\----------------------> 
              /                                       /                                                       \ 
-------------/-----------------> --------------------/----------------------------------------------------->   \-------------------->
remote                change B                                                    old B                               new B



merge conflicts in B: (open B locally in your directory)

...
...
<<<<<<< HEAD
...
<from local side>
...
=======
...
<from remote side>
...
>>>>>>> 95901655e820fa7a450abde172167277


Delete  what you don't want to have:

...
...
< a bit from local und a bit from remote >
...
...



BRANCHES !!!!!!!

local Branch              "git checkout -b <branchname_B>"
                           /------------------------------------------------------------------------->
        "git clone ..."   /                     "git checkout <branchname_A>" (from now work on Branch A)
local          /---------/---------------------------------------------------------------------------> 
              /                                                                            
-------------/--------------------------------------------------------------------------------------->
remote     



local Branch     "..checkout -b.."  change A                  change A lost !!!! (add + commit before checkout to save changes!!!!)
                           /------------------------------------------------------------------------->
        "git clone ..."   /               "git checkout <branchname_A>"
local          /---------/---------------------------------------------------------------------------> 
              /                                                                            
-------------/--------------------------------------------------------------------------------------->
remote 



                "..checkout -b.."   "..add.."
local Branch           change A    "..commit.."                              changes A saved
                      /------------------------------------------------------------------------->
   "git clone ..."   /                 "git checkout <branchname_A>" (all the Files from Branch A are physically in the directory now!!!)
local     /---------/---------------------------------------------------------------------------> 
         /                                                                            
--------/--------------------------------------------------------------------------------------->
remote 

               "..checkout -b.."   "..add.." 
local   Branch_B       change A   "..commit.."                                       A changed   (if there are conflicts it's 
                           /--------------------------------------------------------------\----------->   the same as above)
        "git clone ..."   /              "git checkout <Branch_A>" "git merge <Branch_B>"  \  A changed
local          /---------/-------------------------------------------------------------->   \--------->   Nick has a info for 
              /                                                                                           saving the history of the main
-------------/--------------------------------------------------------------------------------------->    branch
remote 
